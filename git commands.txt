#To initialise git repo
git init

#To add new file in git
git add index.html
#Adding multiple files
git add index.html index2.html 

#To check status
git status

#Files are now staged but you'll have to do the commits
git commit -m "Add msg here to for this commit"

#Suppose now you have done more than one commit you can check history using log & you'll get ids for each commits
git log

#You'll get history of commits and you can temporary resume to older commits using id
git checkout <id>
#In this case you temporary goes back to older commit detached from your branch n if you want to go back to branch
git checkout main

#If you wish to revert commits you can use, that will revert that particular commit and add a message
git revert <id>

#Now we have understood how to delete older commits using git revert 
#Suppose you want to delte old commits and go back to previous stage by not ding reverts
#Undo changes by deleting all commits since <id>
git reset --hard <id>

Simple Git Commands
git init                    => Initialise git repo(once per project)                   
git add <files>             => Stage code changes
git add . or git add *      => To include all files in folder and subfolder
git restore --staged <file> => To unstage file 
git commit -m "Msg here"    => Creats commits for the staged files with msg
git status                  => Gets status for current repo(which files are staged)
git log                     => Gives history for the commits
git checkout <id>           => Temporary moves back to particular commit
git revert <id>             => Revert thec changes of commit id
git reset --hard <id>       => Delete commits and reset to the required commit

#Add file, folder names in .gitignore file to skip files that you don't want to stage
git add .                   => Will only staged all the files except that are mentioned in the ignore files

#Understanding branches: To add a new feature or to resolve an existing bug, we can create new branches
git branch "feat/DATA-2376-Add-a-new-feature"
git branch "fix/DATA-2456-Fix-error-issue"

#Switch to a new branch
git checkout "feat/DATA-2376-Add-a-new-feature"

#To automatically create a new branch and checkout
git checkout -b "feat/DATA-2376-Add-a-new-feature"

#Delete a new branch
git branch -D "feat/DATA-2376-Add-a-new-feature"

#After suppose you're done with new feature development then you can do merge into main
git merge "feat/DATA-2376-Add-a-new-feature"

#How to push local repo into remote repo on GitHub
#Create a repo on GitHub & get the link
#On local system run below command to set origin
git remote set-url origin https://username@github.com/uersname/repo.git
#Will ask for token; Go to Dev Settings->Personal Access Token ->Generate a new token with repo actions
#Push the repo with your main branch in Git using
git push origin master

#Creating a new branch
git checkout -b feat/new-branch
git add .
git commit -m "Msg here"
git push origin feat/new-branch
#Then you can create a pull request on GitHub UI n merge to master or
git checkout master
git merge feat/new-branch
git push origin master


#To pull the code from main 
git checkout master
git pull